name: Update VM and Restore Database

on:
  workflow_dispatch:
    inputs:
      task:
        description: 'Select task to execute:'
        required: true
        default: 'all-task'
        type: choice
        options:
          - restore-database
          - update-app
          - all-task

jobs:
  update-vm:
    runs-on: ubuntu-latest

    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      DB_PASS: ${{ secrets.TF_VAR_DB_PASSWORD }}
      ACC_KEY: ${{ secrets.ARM_ACCESS_KEY }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Install Azure CLI
      run: |
        sudo apt-get update
        sudo apt-get install -y azure-cli

    - name: Login to Azure
      run: |
        az login --service-principal -u ${{ secrets.ARM_CLIENT_ID }} -p ${{ secrets.ARM_CLIENT_SECRET }} --tenant ${{ secrets.ARM_TENANT_ID }}

    - name: Get VM Public IP
      id: get-vm-ip
      run: |
        IP_ADDRESS=$(az vm list-ip-addresses --resource-group azweb-resources --name vm-20-7 --query "[0].virtualMachine.network.publicIpAddresses[0].ipAddress" -o tsv)
        echo "VM_IP=${IP_ADDRESS}"
        echo "VM_IP=${IP_ADDRESS}" >> $GITHUB_ENV

    - name: Install SSH client and SCP
      run: sudo apt-get update && sudo apt-get install -y openssh-client

    - name: Retrieve SSH Key from Azure Storage
      working-directory: ./terraform
      run: |
        echo "Retrieving SSH Key from Azure Storage..."
        az storage blob download --container-name key --name az_ssh_key.pem --file az_ssh_key.pem --account-name constantine2zu --auth-mode key --account-key ${{ secrets.ARM_ACCESS_KEY }}
        chmod 600 az_ssh_key.pem
        echo "SSH Key retrieved successfully."
      shell: bash

    - name: Copy setup_instance.sh and restore_pg_dump.sh to VM
      working-directory: ./terraform
      run: |
        echo "Copying setup_instance.sh and restore_pg_dump.sh to VM..."
        scp -o StrictHostKeyChecking=no -i az_ssh_key.pem setup_instance.sh ubuntu@${{ env.VM_IP }}:/tmp/setup_instance.sh
        scp -o StrictHostKeyChecking=no -i az_ssh_key.pem restore_pg_dump.sh ubuntu@${{ env.VM_IP }}:/tmp/restore_pg_dump.sh
        echo "Files copied successfully."

    - name: Print VM IP
      run: |
        echo "VM IP: ${{ env.VM_IP }}"

    - name: Execute Task
      working-directory: ./terraform
      run: |
        ssh -o StrictHostKeyChecking=no -i az_ssh_key.pem ubuntu@${{ env.VM_IP }} << EOF
         
          sudo mv /tmp/setup_instance.sh /usr/local/bin/setup_instance.sh
          sudo chmod +x /usr/local/bin/setup_instance.sh
          sudo mv /tmp/restore_pg_dump.sh /usr/local/bin/restore_pg_dump.sh
          sudo chmod +x /usr/local/bin/restore_pg_dump.sh

          
          export PFX_FILE_NAME='webaws_pam4_com.pfx'
          export APP_NAME='BlazorAut'
          export DB_USER='dbuser'
          export DB_PASS=${DB_PASS}
          export DB_NAME='dbwebaws'
          export ACC_KEY=${ACC_KEY}

         
          case "${{ github.event.inputs.task }}" in
            "restore-database")
              echo "Restoring Database..."
              sudo -E /usr/local/bin/restore_pg_dump.sh
              ;;
            "update-app")
              echo "Updating Application..."
              sudo -E /usr/local/bin/setup_instance.sh
              ;;
            "all-task")
              echo "Executing All Tasks..."
              sudo -E /usr/local/bin/restore_pg_dump.sh
              sudo -E /usr/local/bin/setup_instance.sh
              ;;
            *)
              echo "Invalid option"
              exit 1
              ;;
          esac
        EOF
