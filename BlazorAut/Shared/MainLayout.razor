@inherits LayoutComponentBase
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@using BlazorAut.Services
@inject ViewOptionService ViewOption

<PageTitle>BlazorAut</PageTitle>

<div class="page">
    <div class="sidebar @ViewOption.NavBarClass">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            <AuthorizeView>
                <Authorized>
                    <div class="center-container">
                        <button class="btn-left" @onclick="ViewOption.Toggle">
                            @(ViewOption.NavBarClass == "d-none" ? ">>" : "<<")
                        </button>
                    </div>

                    <p>
                        Addres: @Navigation.Uri User: @(authenticationState?.User?.Identity?.Name ?? "Anonymous")
                        <a href="javascript:void(0)" @onclick="Logout">Logout</a> |
                        <a href="javascript:void(0)" @onclick="LogoutAll">Logout All</a>
                    </p>

                </Authorized>
                <NotAuthorized>
                    <p>Addres: @Navigation.Uri  Please Login</p>
                    @if (!string.IsNullOrEmpty(Navigation.ToBaseRelativePath(Navigation.Uri)))
                    {
                        Navigation.NavigateTo("/");
                    }
                </NotAuthorized>
            </AuthorizeView>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code {
    private AuthenticationState authenticationState;
    private bool isAuthenticated;
    private string curentUrl;

    protected override async Task OnInitializedAsync()
    {
         authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        Console.WriteLine($"user: {(authenticationState?.User?.Identity?.Name ?? "Anonymous")}");

    }

      protected override async Task OnParametersSetAsync()
    {
        authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        Console.WriteLine($"Parameters set - user: {(authenticationState?.User?.Identity?.Name ?? "Anonymous")}");
    }

    private async Task Logout()
    {
        if (AuthenticationStateProvider is CustomAuthenticationStateProvider customAuthProvider)
        {
            // this device
            await customAuthProvider.LogoutThisDeviceAsync();
            Navigation.NavigateTo("/logout", true);
        }
    }

    private async Task LogoutAll()
    {
        if (AuthenticationStateProvider is CustomAuthenticationStateProvider customAuthProvider)
        {
            // delete from DB
            await customAuthProvider.LogoutAsync();
            Navigation.NavigateTo("/logout", true);
        }
    }

    private void HandleLocationChanged(object sender, LocationChangedEventArgs e)
    {
    
        // rerender component
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        // add to the NavigationManager event
        Navigation.LocationChanged += HandleLocationChanged;

    }

    public void Dispose()
    {
        // remove from the NavigationManager event
        Navigation.LocationChanged -= HandleLocationChanged;
    }

}
