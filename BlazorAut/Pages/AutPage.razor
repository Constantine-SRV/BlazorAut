@page "/"
@inject IEmailService EmailService
@inject BlazorAut.Data.ApplicationDbContext DbContext
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject IEmailSender emailSender
@inject NavigationManager Navigation
@inject NavigationManager Navigation
@inject GetUserRolesService GetUserRolesService
@inject IHttpContextAccessor HttpContextAccessor
@using System.ComponentModel.DataAnnotations
@using BlazorAut.Services
@using BlazorAut.Data
@using Microsoft.EntityFrameworkCore
@using Blazored.LocalStorage

<PageTitle>Request Code</PageTitle>

<h3>Request Code</h3>

<div class="authentication-state">
    <h4>Authentication State</h4>
    <p>User Identity: @(authenticationState?.User?.Identity?.Name ?? "Anonymous")</p>
    <p>Is Authenticated: @(authenticationState?.User?.Identity?.IsAuthenticated ?? false)</p>
</div>

@if (authenticationState?.User?.Identity?.IsAuthenticated ?? false)
{
    <h5>User Roles:</h5>
    <table class="table">
        <thead>
            <tr>
                <th>Role Name</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var role in userRoles)
            {
                <tr>
                    <td>@role</td>
                </tr>
            }
        </tbody>
    </table>

    <button @onclick="LogoutAllDevices" class="btn btn-primary">Logoff All Devices</button>
    <button @onclick="LogouThisDevice" class="btn btn-primary">Logoff only this browser</button>

}
else
{
    if (!isCodeSent)
    {
        <EditForm Model="@emailModel" OnValidSubmit="HandleRequestCode" class="form-group">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label>Email:</label>
                <InputText @bind-Value="emailModel.Email" class="form-control" />
            </div>
            <button type="submit" class="btn btn-primary">Request Code</button>

        </EditForm>
    }
    else
    {
        <EditForm Model="@codeModel" OnValidSubmit="HandleVerifyCode" class="form-group">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label>Enter Code:</label>
                <InputText @bind-Value="codeModel.Code" class="form-control" />
            </div>
            <button type="submit" class="btn btn-primary">Verify Code</button>
            <div class="alert alert-info mt-2">
                

            </div>
        </EditForm>
    }
}

@if (isCodeVerified)
{
    <div class="alert alert-success mt-3">
        <p>Code verified successfully</p>
        <p>User Email: @authenticatedEmail</p>
    </div>
}

@code {
    private EmailModel emailModel = new();
    private CodeModel codeModel = new();
    private bool isCodeSent = false;
    private bool isCodeVerified = false;
    private string authenticatedEmail;
    private AuthenticationState authenticationState;
    private List<string> userRoles = new List<string>();
    private string? clientIp;
    private int? authCodeHistoryId;
    public class EmailModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; }
    }

    public class CodeModel
    {
        [Required]
        public string Code { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        Console.WriteLine($"User Identity: {authenticationState.User.Identity.Name}");
        Console.WriteLine($"Is Authenticated: {authenticationState.User.Identity.IsAuthenticated}");
        if (authenticationState.User.Identity.IsAuthenticated)
        {
            var email = authenticationState.User.Identity.Name;
            userRoles = await GetUserRolesService.GetUserRolesByEmail(email);
        }
        var httpContext = HttpContextAccessor.HttpContext;
        if (httpContext != null)
        {
            clientIp = httpContext.Items["ClientIp"] as string ?? "IP not available";
        }
        else
        {
            clientIp = "HttpContext Error";
        }

    }

    private async Task HandleRequestCode()
    {
        var code = GenerateCode();
        var expiration = DateTime.UtcNow.AddMinutes(15); // Set expiration time

        // Save the code to the main AuthCode table
        var authCode = new AuthCode
            {
                Email = emailModel.Email,
                Code = code,
                Expiration = expiration
            };

        // Remove any existing code for the same email
        var existingAuthCode = await DbContext.AuthCodes.FindAsync(emailModel.Email);
        if (existingAuthCode != null)
        {
            DbContext.AuthCodes.Remove(existingAuthCode);
        }

        // Add the new code
        DbContext.AuthCodes.Add(authCode);

        // Also store this in AuthCodeHistory
        var authCodeHistory = new AuthCodeHistory
            {
                Email = emailModel.Email,
                Code = "0",
                ClientIp = clientIp, // Client's IP address
                RequestedAt = DateTime.UtcNow // Request time
            };

        DbContext.AuthCodeHistories.Add(authCodeHistory); // Add history record
        await DbContext.SaveChangesAsync();
        // Store the inserted record's Id for future use
        authCodeHistoryId = authCodeHistory.Id;
        Console.WriteLine($"authCodeHistory is {authCodeHistoryId.ToString()}");

        // Send the code via email
        await emailSender.SendEmailAsync(emailModel.Email, "Your Code", $"Your code is: {code}");
        isCodeSent = true;
        Console.WriteLine($"Code sent to {emailModel.Email}: {code}");

        // Force a re-render to update the UI
        StateHasChanged();
    }



    private async Task HandleVerifyCode()
    {
        // Find the auth code for the email
        var authCode = await DbContext.AuthCodes.SingleOrDefaultAsync(ac => ac.Email == emailModel.Email);

        // Check if the code is correct and not expired
        if (authCode != null && (authCode.Code == codeModel.Code) && authCode.Expiration > DateTime.UtcNow)
        {
            Console.WriteLine("Code verified successfully");

            // Mark the user as authenticated
            await ((CustomAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsAuthenticated(emailModel.Email);

            // If authCodeHistoryId is available, update the corresponding history record
            if (authCodeHistoryId.HasValue)
            {
                var authCodeHistory = await DbContext.AuthCodeHistories.FindAsync(authCodeHistoryId.Value);
                if (authCodeHistory != null)
                {
                    authCodeHistory.Code = authCode.Code;
                    authCodeHistory.AuthorizedAt = DateTime.UtcNow;
                    await DbContext.SaveChangesAsync();
                }
            }

            authenticatedEmail = emailModel.Email;
            isCodeVerified = true;
            authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

            // Force a re-render to update the UI
            StateHasChanged();
            NavigationManager.NavigateTo("/", forceLoad: true);
        }
        else
        {
            Console.WriteLine("Invalid or expired code");
        }
    }



    private async Task LogoutAllDevices()
    {
        await ((CustomAuthenticationStateProvider)AuthenticationStateProvider).LogoutAsync();
        authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        isCodeVerified = false;
        isCodeSent = false;
        StateHasChanged(); // Обновить UI
        Navigation.NavigateTo("/logout", true);
    }

    private async Task LogouThisDevice()
    {
        await ((CustomAuthenticationStateProvider)AuthenticationStateProvider).LogoutThisDeviceAsync();
        authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        isCodeVerified = false;
        isCodeSent = false;
        StateHasChanged(); // Обновить UI
        Navigation.NavigateTo("/logout", true);
    }

    private string GenerateCode()
    {
        var random = new Random();
        return random.Next(100000, 999999).ToString();
        //return "000000";
    }
}
