@page "/chat"
@using Markdig
@using Microsoft.JSInterop
@inject IChatService ChatService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject GetUserRolesService GetUserRolesService

<h3>Chat with GPT</h3>

@if (isAdmin)
{
   
    <div class="mb-3 row g-2 align-items-center">
        <div class="col-auto">
            <select @bind="selectedModel" class="form-select">
                @foreach (var model in availableModels)
                {
                    <option value="@model">@model</option>
                }
            </select>
        </div>
        <div class="col-auto flex-grow-1">
            <textarea @bind="context" rows="1" class="form-control" placeholder="Enter context to add to every request..."></textarea>
        </div>
        <div class="col-auto">
            <button @onclick="SendMessage" class="btn btn-primary">Send</button>
        </div>
    </div>

 
    <div class="mb-3">
        <textarea @bind="userMessage" rows="4" class="form-control" placeholder="Enter your message..."></textarea>
    </div>

   
    <div>
        <h4>Response:</h4>
        @if (!string.IsNullOrEmpty(gptResponse))
        {
            <div class="markdown-content">
                @((MarkupString)RenderMarkdown(gptResponse))
            </div>
        }
    </div>
}
else
{
    <h4>Access Denied</h4>
    <p>You do not have permission to view this page.</p>
}

@code {
    private string userMessage = string.Empty;
    private string gptResponse = string.Empty;
    private string selectedModel = "o1-mini"; // Default model
    private List<string> availableModels = new List<string>();
    private string context = "Project in C# .NET 8 Blazor. Please format all code snippets using markdown code blocks with triple backticks.";
    private bool isAdmin = false;
    private List<string> userRoles = new List<string>();

    [Inject]
    private IJSRuntime JSRuntime { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            var email = user.Identity.Name;
            userRoles = await GetUserRolesService.GetUserRolesByEmail(email);
            isAdmin = userRoles.Contains("Admin");

            if (isAdmin)
            {
                try
                {
                    availableModels = await ChatService.GetAvailableModelsAsync();
                    if (!availableModels.Contains(selectedModel))
                    {
                        selectedModel = availableModels.FirstOrDefault() ?? "o1-mini";
                    }
                }
                catch (Exception ex)
                {
                    // Handle errors when fetching models
                    Console.Error.WriteLine($"Error fetching models: {ex.Message}");
                }
            }
        }
    }

    private async Task SendMessage()
    {
        if (isAdmin && !string.IsNullOrWhiteSpace(userMessage))
        {
            gptResponse = "Loading...";
            try
            {
                // Combine context with user message
                var fullMessage = $"{context}\n\n{userMessage}";
                gptResponse = await ChatService.GetChatResponseAsync(fullMessage, selectedModel);
                // After receiving the response, render Markdown and add copy buttons
                await InvokeAsync(StateHasChanged);
                await AddCopyButtons();
            }
            catch (Exception ex)
            {
                gptResponse = $"Error: {ex.Message}";
            }
        }
    }

    private string RenderMarkdown(string markdown)
    {
        var pipeline = new MarkdownPipelineBuilder().UseAdvancedExtensions().Build();
        var html = Markdown.ToHtml(markdown, pipeline);
        // Add unique IDs to each code block and append copy button
        int codeBlockIndex = 0;
        html = System.Text.RegularExpressions.Regex.Replace(html, "<pre><code>(.*?)</code></pre>", match =>
        {
            codeBlockIndex++;
            var codeId = $"codeBlock{codeBlockIndex}";
            return $"<pre><code id=\"{codeId}\">{System.Net.WebUtility.HtmlEncode(match.Groups[1].Value)}</code></pre>" +
                   $"<button class=\"btn btn-sm btn-secondary mt-2\" onclick=\"copyCode('{codeId}')\">Copy Code</button>";
        }, System.Text.RegularExpressions.RegexOptions.Singleline);
        return html;
    }

    private async Task AddCopyButtons()
    {
        // Buttons are already added in RenderMarkdown method
        // If additional actions are needed, they can be added here
    }
}
